{"version":3,"sources":["logo.svg","components/TextForm.js","components/Navbar.js","components/alert.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","useState","text","setText","style","color","mode","className","heading","classID","cols","rows","value","onChange","event","target","backgroundColor","onClick","newText","toUpperCase","showAlert","toLowerCase","split","join","length","Navbar","href","title","type","id","to","aboutText","role","toggleMode","for","Alert","alert","msg","App","setmode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ec133cd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"UpperCase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase\", \"success\");\r\n  };\r\n  const handleLowerCase = () => {\r\n    // console.log(\"UpperCase was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\", \"success\");\r\n  };\r\n  const handleClear = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Cleared\", \"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces have been removed\", \"success\");\r\n  };\r\n  const [text, setText] = useState(\"\"); //text is update using the setText\r\n  //   text = \"new text\"; //wrong way to change the state\r\n  //   setText(\"New text\") //this is the correct way to chnage the state\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          color: props.mode === `dark` ? `white` : `#042743`,\r\n        }}\r\n      >\r\n        <div className=\"mb-3\">\r\n          <h3>{props.heading}</h3>\r\n          <textarea\r\n            className=\"form-control\"\r\n            classID=\"myBox\"\r\n            cols=\"30\"\r\n            rows=\"3\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === `dark` ? `grey` : `light`,\r\n              color: props.mode === `dark` ? `white` : `#042743`,\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowerCase}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClear}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n          Remove ExtraSpaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{\r\n          color: props.mode === `dark` ? `white` : `#042743`,\r\n        }}\r\n      >\r\n        <h3>Your text's summary</h3>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length}Minutes Read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length > 0 ? text : \"Enter your text for preview here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n//rfc is typed for getting the base template\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <Router>\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/About\">\r\n                  {props.aboutText}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </Router>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === `light` ? `dark` : `light`\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/alert\";\nlet name = \"Harry\";\nfunction App() {\n  const [mode, setmode] = useState(\"light\"); //tells wether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000); //alert will disappear after 2 seconds\n  };\n  return (\n    <>\n      <Navbar\n        title=\"TextUtilities\"\n        aboutText=\"About\"\n        mode={mode}\n        toggleMode={toggleMode}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Router>\n          <Switch>\n            <Route exact path=\"/About\">\n              <About></About>\n            </Route>\n            <Route exact path=\"/\">\n            </Route>\n            </Switch>\n          </Router> */}\n        <TextForm heading=\"Enter your text\" mode={mode} showAlert={showAlert} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}